
@{
    ViewBag.Title = "V3D";
}

<script src="~/Scripts/three.js"></script>
<script src="~/Scripts/js/renderers/Projector.js"></script>
<script src="~/Scripts/js/renderers/CanvasRenderer.js"></script>
<script src="~/Scripts/js/libs/stats.min.js"></script>

<script src="~/Scripts/js/Detector.js"></script>
<script src="~/Scripts/js/controls/OrbitControls.js"></script>
<script src="~/Scripts/js/libs/stats.min.js"></script>
@*<script src="~/Scripts/js/Cloth.js"></script>*@
<script src="~/Scripts/js/loaders/FBXLoader.js"></script>

<div class="row" style="margin-top:-40px" id="3D"></div>



<script type="x-shader/x-fragment" id="fragmentShaderDepth">
    #include
    <packing>
        uniform sampler2D texture;
        varying vec2 vUV;

        void main() {

        vec4 pixel = texture2D( texture, vUV );

        if ( pixel.a < 0.5 ) discard;

        gl_FragData[ 0 ] = packDepthToRGBA( gl_FragCoord.z );

        }
</script>
<script type="x-shader/x-vertex" id="vertexShaderDepth">
    varying vec2 vUV;

    void main() {

    vUV = 0.75 * uv;

    vec4 mvPosition = modelViewMatrix * vec4( position, 1.0 );

    gl_Position = projectionMatrix * mvPosition;

    }

</script>
<style>
    .v3D
    {
        margin-top:-40px;
    }
</style>
<script>

			/* testing cloth simulation */

			//var pinsFormation = [];
			//var pins = [ 6 ];

			//pinsFormation.push( pins );

			//pins = [ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 ];
			//pinsFormation.push( pins );

			//pins = [ 0 ];
			//pinsFormation.push( pins );

			//pins = []; // cut the rope ;)
			//pinsFormation.push( pins );

			//pins = [ 0, cloth.w ]; // classic 2 pins
			//pinsFormation.push( pins );

			//pins = pinsFormation[ 1 ];


			//function togglePins() {

			//	pins = pinsFormation[ ~~ ( Math.random() * pinsFormation.length ) ];

			//}

			if ( ! Detector.webgl ) Detector.addGetWebGLMessage();

			var container, stats;
			var camera, scene, renderer;

			var clothGeometry;
			var sphere;
			var object;

			init();
			animate();
			var len = 0;
			var wid = 0;
			var hig = 0;
			function doWork(data) {
			    //perform work here
			    len = data.length;
			    wid = data.width;
			    hig = data.height;
			}

			function init() {

			    var view_data;

			    jQuery.ajax({
			        type: "GET",
			        url: "@Url.Action("Getjson")",
			        dataType: 'json',
			        cache: false,
			        success: function (BA) {
			            len = BA.GeneralData.Length*10;
			            wid = BA.GeneralData.Width*10;
			            //hig = BA.GeneralData.height;
			            hig = 1.2;
			            //view_data = BA;
			            //console.log(view_data); //Shows the correct piece of information
			            //doWork(view_data); // Pass data to a function
			            //container = document.getElementById('3D');
			            container = document.createElement('div');
			            container.className = 'v3D';
			            document.body.insertBefore(container, document.getElementById('before'));

			            // scene

			            scene = new THREE.Scene();
			            scene.fog = new THREE.Fog(0x6ca4c8, 1000, 15000);

			            // camera

			            camera = new THREE.PerspectiveCamera(30, window.innerWidth / window.innerHeight, 1, 100000);
			            camera.position.x = 1000;
			            camera.position.y = 50;
			            camera.position.z = 1500;
			            scene.add(camera);

			            // lights

			            var light, materials;

			            scene.add(new THREE.AmbientLight(0x666666));

			            light = new THREE.DirectionalLight(0xdfebff, 1.75);
			            light.position.set(50, 200, 100);
			            light.position.multiplyScalar(1.3);

			            light.castShadow = true;

			            light.shadow.mapSize.width = 1024;
			            light.shadow.mapSize.height = 1024;

			            var d = 300;

			            light.shadow.camera.left = -d;
			            light.shadow.camera.right = d;
			            light.shadow.camera.top = d;
			            light.shadow.camera.bottom = -d;

			            light.shadow.camera.far = 1000;

			            scene.add(light);

			            var loader = new THREE.TextureLoader();
			            //ground
			            var groundTexture = loader.load('../Scripts/js/textures/terrain/grasslight-big.jpg');
			            groundTexture.wrapS = groundTexture.wrapT = THREE.RepeatWrapping;
			            groundTexture.repeat.set(25, 25);
			            groundTexture.anisotropy = 16;
			            var groundMaterial = new THREE.MeshPhongMaterial({ color: 0xffffff, specular: 0x111111, map: groundTexture });

			            var mesh = new THREE.Mesh(new THREE.PlaneBufferGeometry(20000, 20000), groundMaterial);
			            mesh.position.y = -250;
			            mesh.rotation.x = -Math.PI / 2;
			            mesh.receiveShadow = true;
			            scene.add(mesh);

			            // poles
			            //var BATexture = loader.load('../Scripts/js/textures/brick_diffuse.jpg');
			            var BATexture = loader.load('../Scripts/js/textures/sheeting.bmp');

			            BATexture.wrapS = BATexture.wrapT = THREE.RepeatWrapping;
			            //BATexture.repeat.set(100, 100);
			            //BATexture.anisotropy = 100;

			            var poleGeo = new THREE.BoxGeometry(200, 200, 300);
			            //var poleMat = new THREE.MeshPhongMaterial({ color: 0xffffff, specular: 0x111111, shininess: 100 });
			            var poleMat = new THREE.MeshPhongMaterial({ color: 0xffffff, specular: 0x111111, map: BATexture });

			            var mesh = new THREE.Mesh(poleGeo, poleMat);
			            mesh.position.x = 0;
			            mesh.position.y = -140;
			            mesh.receiveShadow = true;
			            mesh.castShadow = true;
			            //scene.add( mesh );

			            var rectLength = wid, rectWidth = hig; rectHEIGT = hig + 100;
			            var rectShape = new THREE.Shape();
			            rectShape.moveTo(-rectLength / 2, -250);

			            rectShape.lineTo(-rectLength / 2, rectWidth);
			            rectShape.lineTo(0, rectHEIGT);
			            rectShape.lineTo(rectLength/2, rectWidth);
			            rectShape.lineTo(rectLength/2, 0 - 250);
			            rectShape.lineTo(-rectLength / 2, 0 - 250);
			            var options = {
			                amount: len,
			                bevelThickness: 2,
			                bevelSize: 0.5,
			                bevelEnabled: true,
			                bevelSegments: 3,
			                bevelEnabled: true,
			                curveSegments: 12,
			                steps: 1,
			            };
			            var rectGeom = createMesh(new THREE.ExtrudeGeometry(rectShape, options));
			            scene.add(rectGeom);


			            ///MODEL TEST
			            // model
			            //var manager = new THREE.LoadingManager();
			            //manager.onProgress = function (item, loaded, total) {
			            //    console.log(item, loaded, total);
			            //};
			            //var onProgress = function (xhr) {
			            //    if (xhr.lengthComputable) {
			            //        var percentComplete = xhr.loaded / xhr.total * 100;
			            //        console.log(Math.round(percentComplete, 2) + '% downloaded');
			            //    }
			            //};
			            //var onError = function (xhr) {
			            //};
			            //var loader = new THREE.FBXLoader(manager);
			            //loader.load('../Scripts/js/ThreeSrc/FBXHouse/AutodeskFBX/xsi_man_skinning.fbx', function (object) {
			            //    object.traverse(function (child) {
			            //        if (child instanceof THREE.Mesh) {
			            //            // pass
			            //        }
			            //        if (child instanceof THREE.SkinnedMesh) {
			            //            if (child.geometry.animations !== undefined || child.geometry.morphAnimations !== undefined) {
			            //                child.mixer = new THREE.AnimationMixer(child);
			            //                mixers.push(child.mixer);
			            //                var action = child.mixer.clipAction(child.geometry.animations[0]);
			            //                action.play();
			            //            }
			            //        }
			            //    });
			            //    scene.add(object);
			            //}, onProgress, onError);

			            ///END



			            //var mesh = new THREE.Mesh( poleGeo, poleMat );
			            //mesh.position.x = 125;
			            //mesh.position.y = - 62;
			            //mesh.receiveShadow = true;
			            //mesh.castShadow = true;
			            //scene.add( mesh );

			            //var mesh = new THREE.Mesh( new THREE.BoxGeometry( 255, 5, 5 ), poleMat );
			            //mesh.position.y = - 250 + ( 750 / 2 );
			            //mesh.position.x = 0;
			            //mesh.receiveShadow = true;
			            //mesh.castShadow = true;
			            //scene.add( mesh );

			            //var gg = new THREE.BoxGeometry( 10, 10, 10 );
			            //var mesh = new THREE.Mesh( gg, poleMat );
			            //mesh.position.y = - 250;
			            //mesh.position.x = 125;
			            //mesh.receiveShadow = true;
			            //mesh.castShadow = true;
			            //scene.add( mesh );

			            //var mesh = new THREE.Mesh( gg, poleMat );
			            //mesh.position.y = - 250;
			            //mesh.position.x = - 125;
			            //mesh.receiveShadow = true;
			            //mesh.castShadow = true;
			            //scene.add( mesh );

			            // renderer

			            renderer = new THREE.WebGLRenderer({ antialias: true });
			            renderer.setPixelRatio(window.devicePixelRatio);
			            renderer.setSize(window.innerWidth, window.innerHeight);
			            renderer.setClearColor(scene.fog.color);
			            //renderer.setClearColor(new THREE.Color(0xEEEEEE, 1.0));


			            container.appendChild(renderer.domElement);

			            renderer.gammaInput = true;
			            renderer.gammaOutput = true;

			            renderer.shadowMap.enabled = true;

			            // controls
			            var controls = new THREE.OrbitControls(camera, renderer.domElement);
			            controls.maxPolarAngle = Math.PI * 0.5;
			            controls.minDistance = 1000;
			            controls.maxDistance = 5000;

			            //performance monitor

			            stats = new Stats();
			            //container.appendChild( stats.dom );

			            //

			            window.addEventListener('resize', onWindowResize, false);

			            //sphere.visible = ! true



			        },
			        failure: function (errMsg) {
			            alert(errMsg);
			        }
			    });






			}

			//

			function onWindowResize() {

				camera.aspect = window.innerWidth / window.innerHeight;
				camera.updateProjectionMatrix();

				renderer.setSize( window.innerWidth, window.innerHeight );

			}




			function createMesh(geom) {

			    //geom.applyMatrix(new THREE.Matrix4().makeTranslation(-20, 0, 0));

			    // assign two materials
			    var meshMaterial = new THREE.MeshNormalMaterial({
			        shading: THREE.FlatShading,
			        transparent: true,
			        opacity: 0.7
			    });

			    var loader = new THREE.TextureLoader();
			    var BATexture = loader.load('../Scripts/js/textures/sheeting.bmp');
			    BATexture.wrapS = BATexture.wrapT = THREE.RepeatWrapping;
			    BATexture.repeat.set(.01, .01);
			    BATexture.anisotropy = 10;
			    var poleMat = new THREE.MeshPhongMaterial({ color: 0xffffff, specular: 0x111111, map: BATexture });

			    // create a multimaterial
			    //var mesh = THREE.SceneUtils.createMultiMaterialObject(geom, [meshMaterial]);
			    var mesh = new THREE.Mesh(geom, poleMat);

			    mesh.receiveShadow = true;
			    mesh.castShadow = true;

			    return mesh;
			}



			//

			function animate() {

				requestAnimationFrame( animate );

				var time = Date.now();

				//windStrength = Math.cos( time / 7000 ) * 20 + 40;
				//windForce.set( Math.sin( time / 2000 ), Math.cos( time / 3000 ), Math.sin( time / 1000 ) ).normalize().multiplyScalar( windStrength );

				//simulate( time );
				render();
				stats.update();

			}

			function render() {

				//var p = cloth.particles;

				//for ( var i = 0, il = p.length; i < il; i ++ ) {

				//	clothGeometry.vertices[ i ].copy( p[ i ].position );

				//}

				//clothGeometry.computeFaceNormals();
				//clothGeometry.computeVertexNormals();

				//clothGeometry.normalsNeedUpdate = true;
				//clothGeometry.verticesNeedUpdate = true;

				//sphere.position.copy( ballPosition );

				camera.lookAt( scene.position );

				renderer.render( scene, camera );

			}

</script>



@*<script>
			var container, stats;
			var camera, scene, renderer;
			var cube, plane;
			var targetRotation = 0;
			var targetRotationOnMouseDown = 0;
			var mouseX = 0;
			var mouseXOnMouseDown = 0;
			var windowHalfX = window.innerWidth / 2;
			var windowHalfY = window.innerHeight / 2;
			var myElem;
			init();
			animate();
			function init() {
			    container = document.createElement('div');
			    myElem = document.getElementById("3D");
			    document.body.appendChild(container);
                // Create Camera 
				camera = new THREE.PerspectiveCamera( 70, window.innerWidth / window.innerHeight, 0.1, 1000 );
				camera.position.y = 150;
				camera.position.z = 500;

				scene = new THREE.Scene();
				// Cube
				var geometry = new THREE.BoxGeometry( 200, 200, 200 );
				//for ( var i = 0; i < geometry.faces.length; i += 2 ) {
				//	var hex = Math.random() * 0xffffff;
				//	geometry.faces[ i ].color.setHex( hex );
				//	geometry.faces[ i + 1 ].color.setHex( hex );
				//}
			    //var material = new THREE.MeshBasicMaterial( { vertexColors: THREE.FaceColors, overdraw: 0.5 } );
				var material = new THREE.MeshLambertMaterial({ color: 0xff0000 });
				cube = new THREE.Mesh( geometry, material );
				cube.position.y = 150;
				cube.castShadow = true;
				scene.add(cube);

				// Plane
				var geometry = new THREE.PlaneBufferGeometry( 200, 200 );
				geometry.rotateX( - Math.PI / 2 );
				var material = new THREE.MeshBasicMaterial( { color: 0xe0e0e0, overdraw: 0.5 } );
				plane = new THREE.Mesh(geometry, material);
				plane.receiveShadow = true;
				scene.add(plane);
			    // create a render and set the size
				renderer = new THREE.CanvasRenderer();
				renderer.setClearColor(0xFFFFFF);
				renderer.setPixelRatio( window.devicePixelRatio );
				renderer.setSize(window.innerWidth, window.innerHeight);
				renderer.shadowMapEnabled = true;


			    // position and point the camera to the center of the scene
				//camera.position.x = -30;
				//camera.position.y = 40;
				//camera.position.z = 30;
				//camera.lookAt(scene.position);

			    // add spotlight for the shadows
				var spotLight = new THREE.SpotLight(0xffffff);
				spotLight.position.set(-200, 500, -10);
				spotLight.castShadow = true;
				scene.add(spotLight);

				container.appendChild( renderer.domElement );
				stats = new Stats();
				//container.appendChild( stats.dom );
				document.addEventListener( 'mousedown', onDocumentMouseDown, false );
				document.addEventListener( 'touchstart', onDocumentTouchStart, false );
				document.addEventListener( 'touchmove', onDocumentTouchMove, false );
				//
				window.addEventListener( 'resize', onWindowResize, false );
			}

			function onWindowResize() {
				windowHalfX = window.innerWidth / 2;
				windowHalfY = window.innerHeight / 2;
				camera.aspect = window.innerWidth / window.innerHeight;
				camera.updateProjectionMatrix();
				renderer.setSize( window.innerWidth, window.innerHeight );
			}
			//
			function onDocumentMouseDown( event ) {
				event.preventDefault();
				document.addEventListener( 'mousemove', onDocumentMouseMove, false );
				document.addEventListener( 'mouseup', onDocumentMouseUp, false );
				document.addEventListener( 'mouseout', onDocumentMouseOut, false );
				mouseXOnMouseDown = event.clientX - windowHalfX;
				targetRotationOnMouseDown = targetRotation;
			}
			function onDocumentMouseMove( event ) {
				mouseX = event.clientX - windowHalfX;
				targetRotation = targetRotationOnMouseDown + ( mouseX - mouseXOnMouseDown ) * 0.02;
			}
			function onDocumentMouseUp( event ) {
				document.removeEventListener( 'mousemove', onDocumentMouseMove, false );
				document.removeEventListener( 'mouseup', onDocumentMouseUp, false );
				document.removeEventListener( 'mouseout', onDocumentMouseOut, false );
			}
			function onDocumentMouseOut( event ) {
				document.removeEventListener( 'mousemove', onDocumentMouseMove, false );
				document.removeEventListener( 'mouseup', onDocumentMouseUp, false );
				document.removeEventListener( 'mouseout', onDocumentMouseOut, false );
			}
			function onDocumentTouchStart( event ) {
				if ( event.touches.length === 1 ) {
					event.preventDefault();
					mouseXOnMouseDown = event.touches[ 0 ].pageX - windowHalfX;
					targetRotationOnMouseDown = targetRotation;
				}
			}
			function onDocumentTouchMove( event ) {
				if ( event.touches.length === 1 ) {
					event.preventDefault();
					mouseX = event.touches[ 0 ].pageX - windowHalfX;
					targetRotation = targetRotationOnMouseDown + ( mouseX - mouseXOnMouseDown ) * 0.05;
				}
			}
			//
			function animate() {
				requestAnimationFrame( animate );
				stats.begin();
				render();
				stats.end();
			}
			function render() {
				plane.rotation.y = cube.rotation.y += ( targetRotation - cube.rotation.y ) * 0.05;
				renderer.render( scene, camera );
			}
</script>*@
