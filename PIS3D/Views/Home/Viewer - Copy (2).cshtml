
@{
    ViewBag.Title = "V3D";
}

<script src="~/Scripts/three.js"></script>
<script src="~/Scripts/js/renderers/Projector.js"></script>
<script src="~/Scripts/js/renderers/CanvasRenderer.js"></script>
<script src="~/Scripts/js/libs/stats.min.js"></script>

<script src="~/Scripts/js/Detector.js"></script>
<script src="~/Scripts/js/controls/OrbitControls.js"></script>
<script src="~/Scripts/js/libs/stats.min.js"></script>
@*<script src="~/Scripts/js/Cloth.js"></script>*@
<script src="~/Scripts/js/loaders/FBXLoader.js"></script>

<div class="row" style="margin-top:-40px" id="3D"></div>



<script type="x-shader/x-fragment" id="fragmentShaderDepth">
    #include
    <packing>
        uniform sampler2D texture;
        varying vec2 vUV;

        void main() {

        vec4 pixel = texture2D( texture, vUV );

        if ( pixel.a < 0.5 ) discard;

        gl_FragData[ 0 ] = packDepthToRGBA( gl_FragCoord.z );

        }
</script>
<script type="x-shader/x-vertex" id="vertexShaderDepth">
    varying vec2 vUV;

    void main() {

    vUV = 0.75 * uv;

    vec4 mvPosition = modelViewMatrix * vec4( position, 1.0 );

    gl_Position = projectionMatrix * mvPosition;

    }

</script>
<style>
    .v3D
    {
        margin-top:-40px;
    }
</style>
<script>


    if (!Detector.webgl) Detector.addGetWebGLMessage();

    var container, stats;
    var camera, scene, renderer;

    var clothGeometry;
    var sphere;
    var object;

    init();
    animate();
    var len = 0;
    var wid = 0;
    var hig = 0;

    function init() {

        var view_data;

        jQuery.ajax({
            type: "GET",
            url: "@Url.Action("Getjson")",
            dataType: 'json',
            cache: false,
            success: function (BA) {
                len = BA.GeneralData.Length * 10;
                wid = BA.GeneralData.Width * 10;
                hig = 1.2;

                container = document.createElement('div');
                container.className = 'v3D';
                document.body.insertBefore(container, document.getElementById('before'));

                // scene
                scene = new THREE.Scene();
                //scene.fog = new THREE.Fog(0x6ca4c8, 1000, 15000);
                scene.fog = new THREE.Fog(0x000000, 1000, 15000);

                // camera
                camera = new THREE.PerspectiveCamera(30, window.innerWidth / window.innerHeight, 1, 100000);
                camera.position.x = 1000;
                camera.position.y = 50;
                camera.position.z = 1500;
                scene.add(camera);

                // lights
                var light, materials;
                scene.add(new THREE.AmbientLight(0x666666));
                light = new THREE.DirectionalLight(0xdfebff, 1.75);
                light.position.set(50, 200, 100);
                light.position.multiplyScalar(1.3);
                light.castShadow = true;
                light.shadow.mapSize.width = 1024;
                light.shadow.mapSize.height = 1024;

                var d = BA.GeneralData.Width * 20;
                light.shadow.camera.left = -d;
                light.shadow.camera.right = d;
                light.shadow.camera.top = d;
                light.shadow.camera.bottom = -d;
                light.shadow.camera.far = 1000;
                scene.add(light);
                var loader = new THREE.TextureLoader();

                //ground
                //var groundTexture = loader.load('../Scripts/js/textures/terrain/grasslight-big.jpg');
                var groundTexture = loader.load('../Scripts/js/textures/terrain/4.jpg');
                groundTexture.wrapS = groundTexture.wrapT = THREE.RepeatWrapping;
                groundTexture.repeat.set(25, 25);
                groundTexture.anisotropy = 16;
                var groundMaterial = new THREE.MeshPhongMaterial({ color: 0xffffff, specular: 0x111111, map: groundTexture });
                var mesh = new THREE.Mesh(new THREE.PlaneBufferGeometry(20000, 20000), groundMaterial);
                mesh.position.y = -100;
                mesh.rotation.x = -Math.PI / 2;
                mesh.receiveShadow = true;
                scene.add(mesh);

                // poles
                //var BATexture = loader.load('../Scripts/js/textures/brick_diffuse.jpg');
                var BATexture = loader.load('../Scripts/js/textures/sheeting.bmp');
                BATexture.wrapS = BATexture.wrapT = THREE.RepeatWrapping;
                //BATexture.repeat.set(100, 100);
                //BATexture.anisotropy = 100;

                var poleGeo = new THREE.BoxGeometry(200, 200, 300);
                //var poleMat = new THREE.MeshPhongMaterial({ color: 0xffffff, specular: 0x111111, shininess: 100 });
                var poleMat = new THREE.MeshPhongMaterial({ color: 0xffffff, specular: 0x111111, map: BATexture });

                var mesh = new THREE.Mesh(poleGeo, poleMat);
                mesh.position.x = 0;
                mesh.position.y = -140;
                mesh.receiveShadow = true;
                mesh.castShadow = true;
                //scene.add( mesh );

                var scale = 20;
                var BAREW = BA.GeneralData.Gables.Gable[0].RightHeight;
                //var BALEW = BA.GeneralData.Gables.Gable[BA.GeneralData.Gables.Gable.Length-1].LeftHeight;
                var PeakPoint = 100;
                var BAWidth = BA.GeneralData.Width * scale;
                var BALength = BA.GeneralData.Length * scale;
                var shiftbottm = -100; // shift to bottom value
                var shiftLeft = -BAWidth/2 ; // shift to left value to center building
                for (var i = 0 ; i < BA.GeneralData.Gables.Gable.length ; i++) {
                    var Gable = BA.GeneralData.Gables.Gable[i];

                    var GableRidgeDist = Gable.RidgeDistance * scale;
                    var GableREW = Gable.RightHeight * scale;
                    var GableLEW = Gable.LeftHeight * scale;
                    var GablePeakPoint = (Gable.LeftSlope/10 * Gable.RidgeDistance + Gable.LeftHeight) * scale;
                    var GableWidth = Gable.Width * scale;
                    var GableShape = new THREE.Shape();

                    GableShape.moveTo(shiftLeft, shiftbottm);

                    GableShape.lineTo(shiftLeft, GableLEW + shiftbottm);
                    GableShape.lineTo(GableRidgeDist + shiftLeft, GablePeakPoint + shiftbottm);
                    GableShape.lineTo(GableWidth + shiftLeft, GableREW + shiftbottm);
                    GableShape.lineTo(GableWidth + shiftLeft, +shiftbottm);
                    GableShape.lineTo(shiftLeft, +shiftbottm);

                    var options = {
                        amount: BALength,  // Length of build
                        bevelThickness: 2,
                        bevelSize: 0.5,
                        bevelEnabled: true,
                        bevelSegments: 3,
                        bevelEnabled: true,
                        curveSegments: 12,
                        steps: 1,
                    };
                    var GableGeom = createMesh(new THREE.ExtrudeGeometry(GableShape, options));
                    GableGeom.position.z = -BALength / 2;
                    shiftLeft = shiftLeft + GableWidth;

                    scene.add(GableGeom);
                }
                // renderer

                renderer = new THREE.WebGLRenderer({ antialias: true });
                renderer.setPixelRatio(window.devicePixelRatio);
                renderer.setSize(window.innerWidth, window.innerHeight);
                renderer.setClearColor(scene.fog.color);
                //renderer.setClearColor(new THREE.Color(0xEEEEEE, 1.0));


                container.appendChild(renderer.domElement);

                renderer.gammaInput = true;
                renderer.gammaOutput = true;

                renderer.shadowMap.enabled = true;

                // controls
                var controls = new THREE.OrbitControls(camera, renderer.domElement);
                controls.maxPolarAngle = Math.PI * 0.5;
                controls.minDistance = 1000;
                controls.maxDistance = 5000;

                //performance monitor

                stats = new Stats();
                //container.appendChild( stats.dom );

                //

                window.addEventListener('resize', onWindowResize, false);
                //sphere.visible = ! true

            },
            failure: function (errMsg) {
                alert(errMsg);
            }
        });
    }

    //
    function onWindowResize() {

        camera.aspect = window.innerWidth / window.innerHeight;
        camera.updateProjectionMatrix();

        renderer.setSize(window.innerWidth, window.innerHeight);

    }


    function createMesh(geom) {

        //geom.applyMatrix(new THREE.Matrix4().makeTranslation(-20, 0, 0));

        // assign two materials
        var meshMaterial = new THREE.MeshNormalMaterial({
            shading: THREE.FlatShading,
            transparent: true,
            opacity: 0.7
        });

        var loader = new THREE.TextureLoader();
        var BATexture = loader.load('../Scripts/js/textures/sheeting.bmp');
        BATexture.wrapS = BATexture.wrapT = THREE.RepeatWrapping;
        BATexture.repeat.set(.01, .01);
        BATexture.anisotropy = 10;
        var poleMat = new THREE.MeshPhongMaterial({ color: 0xffffff, specular: 0x111111, map: BATexture });

        // create a multimaterial
        //var mesh = THREE.SceneUtils.createMultiMaterialObject(geom, [meshMaterial]);
        var mesh = new THREE.Mesh(geom, poleMat);

        mesh.receiveShadow = true;
        mesh.castShadow = true;

        return mesh;
    }

    //
    function animate() {

        requestAnimationFrame(animate);

        var time = Date.now();

        //windStrength = Math.cos( time / 7000 ) * 20 + 40;
        //windForce.set( Math.sin( time / 2000 ), Math.cos( time / 3000 ), Math.sin( time / 1000 ) ).normalize().multiplyScalar( windStrength );

        //simulate( time );
        render();
        stats.update();

    }

    function render() {

        camera.lookAt(scene.position);

        renderer.render(scene, camera);

    }

</script>
